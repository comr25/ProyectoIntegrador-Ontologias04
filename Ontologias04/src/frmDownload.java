import java.io.*;
import org.apache.jena.riot.Lang;
import org.apache.jena.riot.RDFDataMgr;
import org.apache.jena.rdf.model.RDFWriter;
import org.apache.jena.rdf.model.RDFErrorHandler;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.ontology.OntModel;
import org.apache.jena.ontology.OntClass;
import org.apache.jena.query.*;
import org.apache.jena.ontology.OntModelSpec;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.ontology.DatatypeProperty;
import org.apache.jena.ontology.ObjectProperty;
import org.apache.jena.ontology.Individual;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author administrador
 */
public class frmDownload extends javax.swing.JFrame {

    /**
     * Creates new form frmDownload
     */
    public frmDownload() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel3 = new javax.swing.JLabel();
        txtDominio = new javax.swing.JTextField();
        cmbServidor = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cmbServidor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DbPedia", "W3C" }));
        cmbServidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbServidorActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setText("Domain");

        jLabel2.setText("Server");

        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(223, 38, 40));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel4.setText("Limitar");

        jTextField1.setText("100");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(23, 23, 23)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtDominio, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cmbServidor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDominio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String servidor = "PREFIX  onto: <http://dbpedia.org/ontology/>\n";
        String instancesmodel = "PREFIX rdfs: <http://www.w3.org/1999/02/22-rdf-syntax-ns#type>\n";
        String subclassesmodel = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n";  
        String domain = txtDominio.getText();
        String limite = jTextField1.getText();
        
        Integer nresultados = limite == "" ? 100 : Integer.parseInt(limite);
        
        String strsubclases =   subclassesmodel + servidor +
                                " SELECT distinct ?subClass WHERE { " +
                                " ?subClass rdfs:subClassOf onto:"+ domain + ". } LIMIT " + nresultados;
        
        String strdataproperties = servidor +
                                     "select distinct ?property where { \n" +
                                     " ?property <http://www.w3.org/2000/01/rdf-schema#domain> onto:" + domain + " . } LIMIT " + nresultados;
        
        String strobjectproperties = servidor +
                                     "select distinct ?property where { \n" +
                                     " ?property <http://www.w3.org/2000/01/rdf-schema#range> onto:" + domain + " . } LIMIT " + nresultados;
        
        String strinstances = 
                                servidor + 
                                "SELECT distinct ?instances \n" +
                                "WHERE\n" +
                                "{ \n" +
                                "    ?instances <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> onto:"+ domain +" . \n" +
                                "}\n" +
                                "LIMIT  " + nresultados;
                
        Query querysubclases = QueryFactory.create(strsubclases);
        Query querydataprop = QueryFactory.create(strdataproperties);
        Query queryobjectprop = QueryFactory.create(strobjectproperties);
        Query queryinstances = QueryFactory.create(strinstances);
        
        QueryExecution qexec = QueryExecutionFactory.sparqlService("http://dbpedia.org/sparql", querysubclases);
        QueryExecution qexed = QueryExecutionFactory.sparqlService("http://dbpedia.org/sparql", querydataprop);
        QueryExecution qexeo = QueryExecutionFactory.sparqlService("http://dbpedia.org/sparql", queryobjectprop);
        QueryExecution qexei = QueryExecutionFactory.sparqlService("http://dbpedia.org/sparql", queryinstances);
        
        ResultSet resultsc = qexec.execSelect();
        ResultSet resultsd = qexed.execSelect(); 
        ResultSet resultso = qexeo.execSelect(); 
        ResultSet resultsi = qexei.execSelect();       
       
        
        OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM);
        OntModel model2 = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM);
        model.setNsPrefix("owl", "http://www.w3.org/2002/07/owl#");
        model.setNsPrefix("rdfs", "http://www.w3.org/2000/01/rdf-schema#");
        model.setNsPrefix("rdf","http://www.w3.org/1999/02/22-rdf-syntax-ns#");
        model.setNsPrefix("xsd","http://www.w3.org/2001/XMLSchema#");
        
        OntClass classdomain =  model.createClass(domain);
        OntClass classdomain2 =  model2.createClass("owl:"+domain);
        
        String cadClases = "";
        String cadPropDatos = "";
        String cadPropObjetos = "";
        String cadInstances = "";
        
        int nClases = 0;
        int nPropDatos = 0;
        int nPropObjetos = 0;
        int nInstancias = 0;

        while (resultsc.hasNext())
	{
		QuerySolution binding = resultsc.nextSolution();
		Resource subj = (Resource) binding.get("subClass");
                String classname = subj.getURI().replace("http://dbpedia.org/ontology/","");
                
                cadClases += classname + "<br>"; 
                
                OntClass subclass = model.createClass(classname);
                classdomain.addSubClass( subclass );
                
                OntClass subclass2 = model2.createClass("owl:" + classname);
                classdomain2.addSubClass( subclass2 );
                
                nClases++;
	}
         
        while (resultsd.hasNext())
	{
            QuerySolution binding = resultsd.nextSolution();
            Resource subj = (Resource) binding.get("property");
            String objpropname = subj.getURI().replace("http://dbpedia.org/ontology/","");
            //System.out.println(subj.getURI());
            
            cadPropDatos += objpropname + "<br>";
              
            DatatypeProperty dtp = model.createDatatypeProperty(objpropname);
            dtp.addDomain(classdomain);
            
            DatatypeProperty dtp2 = model2.createDatatypeProperty("rdf:"+objpropname);
            dtp2.addDomain(classdomain2);
            
            nPropDatos++;
	}  
        
        while (resultso.hasNext())
	{
            QuerySolution binding = resultso.nextSolution();
            Resource subj = (Resource) binding.get("property");
            String objpropname = subj.getURI().replace("http://dbpedia.org/ontology/","");
            //System.out.println(subj.getURI());
            
            cadPropObjetos += objpropname + "<br>";
              
            ObjectProperty op = model.createObjectProperty(objpropname);
            ObjectProperty op2 = model2.createObjectProperty("rdf:"+objpropname);
            
            nPropObjetos++;
	}   
        
        while (resultsi.hasNext())
	{
            QuerySolution binding = resultsi.nextSolution();
            Resource subj = (Resource) binding.get("instances");
           // System.out.println(subj.getURI());
            String instancename = subj.getURI().replace("http://dbpedia.org/resource/","");
            
            cadInstances += instancename + "<br>";
            
            Individual ind = model.createIndividual( instancename, classdomain);
            Individual ind2 = model2.createIndividual( "owl:"+instancename, classdomain2);
            
            nInstancias++;
	}
        
        try{
            System.out.println("Aqui");
            JFileChooser a = new JFileChooser();
            
            FileNameExtensionFilter filter3 = new FileNameExtensionFilter("HTML","HTML");
            FileNameExtensionFilter filter2 = new FileNameExtensionFilter("JSON","JSON");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("N3","N3");
            
            a.setFileSelectionMode(JFileChooser.FILES_ONLY);
            
            a.setFileFilter(filter3);
            a.setFileFilter(filter2);
            a.setFileFilter(filter);
            
            a.setDialogTitle("Save an Ontology"); // a.addChoosableFileFilter(filter);                
            int res = a.showSaveDialog(a);         
            
            if ( res == JFileChooser.APPROVE_OPTION)
            {
                javax.swing.filechooser.FileFilter fil = a.getFileFilter();
                
                String formato = fil.getDescription();
                Lang lang = formato=="JSON" ? Lang.RDFJSON: formato == "N3" ? Lang.N3:null;
                
                String namefile = a.getSelectedFile().getAbsolutePath();
            
                if(lang != null)
                {
                    OutputStream os = new FileOutputStream(namefile+"."+formato);
                    
                    if (lang == Lang.RDFJSON)
                        RDFDataMgr.write(os, model2, lang);
                    else
                        RDFDataMgr.write(os, model, lang);
                }
                else
                {
                    String html = "<table>"
                                          + "<th style='text-align: left;'>Clases</th>"+
                                            "<th style='text-align: left;'>Propiedades de datos</th>" +
                                            "<th style='text-align: left;'>Propiedades de objetos</th>" +
                                            "<th style='text-align: left;'>Instancias</th>" +
                                    "<tr>"
                                        + "<td valign='top'>"+ cadClases +"</td>"
                                        + "<td valign='top'>"+ cadPropDatos +"</td>"
                                        + "<td valign='top'>"+ cadPropObjetos +"</td>"
                                        + "<td valign='top'>"+ cadInstances +"</td>"
                                  + "<tr>"+
                                "</table>";
                    
                    OutputStream os = new FileOutputStream(namefile+"."+"HTML");
                    OutputStreamWriter osw = new OutputStreamWriter(os);

                    osw.write(html);

                    osw.close();
                    os.close();
                }
                JOptionPane.showMessageDialog(null," success! \n "+a.getSelectedFile().getName(),"Ontology saved!",JOptionPane.WARNING_MESSAGE,new ImageIcon(getClass().getResource("Tasks.png")));              
            }
         }catch(Exception ex){}
        
        jTextArea1.setText("Results \n    Domain: " + domain + "\n    Classes: " + nClases
                            +"\n    Instances: " + nInstancias +"\n    Data Properties: "
                            + nPropDatos + "\n    Object Properties: " + nPropObjetos);
    }//GEN-LAST:event_btnSearchActionPerformed
    
    private static String getExtension( File f)
    {
        String ext = null;
        String cad = f.getName();
        int i = cad.lastIndexOf('.');
        if (i > 0 && i < cad.length() - 1 ){ 
            ext = cad.substring(i+1).toLowerCase();
        }
        return ext;
    }
    
    private void cmbServidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbServidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbServidorActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmDownload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmDownload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmDownload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmDownload.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmDownload().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbServidor;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField txtDominio;
    // End of variables declaration//GEN-END:variables
}
